{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ch",
				"checksums"
			],
			[
				"region",
				"region_name"
			],
			[
				"mod",
				"module_name"
			],
			[
				"ver",
				"verify_checksums"
			],
			[
				"vect",
				"vector_space_ptr"
			],
			[
				"function",
				"function_space_constructor_helper_functions_mod"
			],
			[
				"vec",
				"vector_space_ptr"
			],
			[
				"field",
				"field_parent_mod"
			],
			[
				"fun",
				"function_space_type"
			],
			[
				"funcion_",
				"function_space_mod"
			],
			[
				"glob",
				"global_mesh"
			],
			[
				"num",
				"num_edge"
			],
			[
				"ncells_",
				"ncells_2d_with_ghost"
			],
			[
				"extr",
				"extrusion"
			],
			[
				"extru",
				"extrusion_ptr"
			],
			[
				"cell_ne",
				"cell_next_2d"
			],
			[
				"par",
				"partition_type"
			],
			[
				"lin",
				"linked_list_data_mod"
			],
			[
				"global_mesh_con",
				"global_mesh_constructor_unit_test_data"
			],
			[
				"pro",
				"program"
			],
			[
				"global_mesh_map_",
				"global_mesh_map_collection_mod"
			],
			[
				"global_me",
				"global_mesh_map_mod"
			],
			[
				"ver_on",
				"vert_on_cell_2d"
			],
			[
				"num_no",
				"num_nodes_per_face"
			],
			[
				"driver",
				"driver_code"
			],
			[
				"extract_PSy",
				"extract_PSyDataInit"
			],
			[
				"valid_p",
				"valid_psy_data_prefix"
			],
			[
				"valid",
				"valid_psy_data_prefix"
			],
			[
				"psy_da",
				"psy_data_body"
			],
			[
				"dist",
				"distributed_memory"
			],
			[
				"make",
				"make_symbol"
			],
			[
				"num_p",
				"num_post_vars"
			],
			[
				"un",
				"unique_local_name"
			],
			[
				"ps",
				"psy_data_mod"
			],
			[
				"new",
				"new_symbol"
			],
			[
				"LFRi",
				"LFRicExtractTrans"
			],
			[
				"_regio",
				"_region_name"
			],
			[
				"Decla",
				"DeclareScalarDouble"
			],
			[
				"PSyData",
				"PSyDataNode"
			],
			[
				"body",
				"loop_body"
			],
			[
				"ex",
				"excinfo"
			],
			[
				"ReadSc",
				"ReadScalarDouble"
			],
			[
				"se",
				"set_region_identifier"
			],
			[
				"set",
				"set_region_identifier"
			],
			[
				"_region_",
				"_region_identifier"
			],
			[
				"creaTe",
				"create_driver"
			],
			[
				"inp",
				"input_list"
			],
			[
				"GOceanE",
				"GOceanExtractNode"
			],
			[
				"Extract",
				"ExtractNode"
			],
			[
				"field_",
				"field_name"
			],
			[
				"fo",
				"format"
			],
			[
				"_config",
				"_config_file"
			],
			[
				"config",
				"config_file"
			],
			[
				"fie",
				"field_prop"
			],
			[
				"Intern",
				"InternalError"
			],
			[
				"derefer",
				"dereference_name"
			],
			[
				"up",
				"update_field_modupdate_field_code_code"
			],
			[
				"init",
				"init_field_modinit_field_code_code"
			],
			[
				"ini",
				"init_field_modinit_field_code_code"
			],
			[
				"outp",
				"output_list"
			],
			[
				"_po",
				"_post_name"
			],
			[
				"pre-",
				"pre-far-postfix"
			],
			[
				"_p",
				"_pre_name"
			],
			[
				"a_fld",
				"a_fld_post"
			],
			[
				"post",
				"post_variable_list"
			],
			[
				"set_of",
				"set_of_variables_to_declare"
			],
			[
				"stop",
				"stop_expr"
			],
			[
				"WriteSc",
				"WriteScalarReal"
			],
			[
				"DeclareScala",
				"DeclareScalarReal"
			],
			[
				"node_",
				"node_list"
			],
			[
				"filename",
				"file_name"
			],
			[
				"FAlse",
				"False"
			],
			[
				"va",
				"value"
			],
			[
				"ExtractTran",
				"ExtractRegionTrans"
			],
			[
				"new_sche",
				"new_sched_str"
			],
			[
				"PSy",
				"PSyDataType"
			],
			[
				"Extr",
				"ExtractNode"
			],
			[
				"tr",
				"transformations"
			],
			[
				"data",
				"data_trans"
			],
			[
				"Transform",
				"TransformationError"
			],
			[
				"Tran",
				"TransformationError"
			],
			[
				"Ex",
				"ExtractRegionTrans"
			],
			[
				"extract",
				"extract_region_trans"
			],
			[
				"DynamoEx",
				"DynamoExtractRegionTrans"
			],
			[
				"tra",
				"transformations"
			],
			[
				"psyda",
				"psy_data"
			],
			[
				"num_",
				"num_pre_vars"
			],
			[
				"io",
				"io_type"
			],
			[
				"invok",
				"invoke_info"
			],
			[
				"sc",
				"schedule"
			],
			[
				"ivo",
				"invoke_info"
			],
			[
				"invoke_",
				"invoke_info"
			],
			[
				"get",
				"get_invoke"
			],
			[
				"invoke",
				"invoke_info"
			],
			[
				"binary",
				"binary_op_list"
			],
			[
				"get_o",
				"get_output_parameters"
			],
			[
				"variables_",
				"variables_info"
			],
			[
				"indiret",
				"indirect_addressing"
			],
			[
				"sub",
				"WriteScalarDoublePrecision"
			],
			[
				"access_",
				"access_type"
			],
			[
				"Expec",
				"expected_sched"
			],
			[
				"abstr",
				"abstractmethod"
			],
			[
				"elem",
				"element_order"
			],
			[
				"DynamoLoopFu",
				"DynamoLoopFuseTrans"
			],
			[
				"in",
				"invokes"
			],
			[
				"gen",
				"gen_code"
			],
			[
				"omp_",
				"omp_sched"
			],
			[
				"all_a",
				"all_accesses"
			],
			[
				"_add",
				"_add_info"
			],
			[
				"state",
				"statements"
			],
			[
				"_Add",
				"_add_info"
			],
			[
				"mat",
				"math_equal"
			],
			[
				"add_",
				"_add_warning"
			],
			[
				"is_rea",
				"is_read_only"
			],
			[
				"loop_t",
				"loop_types_to_parallelise"
			],
			[
				"loop_typ",
				"loop_type_to_parallelise"
			],
			[
				"data_d",
				"data_directivesx"
			],
			[
				"symbol",
				"symboltable_info"
			],
			[
				"sym",
				"symboltable_info"
			],
			[
				"acc",
				"access_type"
			],
			[
				"else",
				"else_body"
			],
			[
				"if",
				"if_body"
			],
			[
				"_var",
				"_var_to_varinfo"
			],
			[
				"strin",
				"create_dict_from_string"
			],
			[
				"GH_VAL",
				"GH_VALID_ARG_TYPE_NAMES"
			],
			[
				"_v",
				"_vector_size"
			],
			[
				"from",
				"from_string"
			],
			[
				"_ac",
				"_access_descriptor"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/joerg/lfric/work/trunk/miniapps/gravity_wave/Makefile",
			"settings":
			{
				"buffer_size": 9947,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/joerg/lfric/work/trunk/infrastructure/build/psyclone.mk",
			"settings":
			{
				"buffer_size": 3203,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/joerg/lfric/work/trunk/miniapps/gravity_wave/optimisation/generic-x86/algorithm/gw_init_fields_alg_mod.py",
			"settings":
			{
				"buffer_size": 2745,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Program test\n    USE field_mod\n    USE grid_mod\n    use decomposition_mod, only : decomposition_type\n    use parallel_mod, only      : parallel_init\n\n    use init_field_mod,   only : init_field\n    use update_field_mod, only : update_field\n\n    TYPE(r2d_field)          :: a_fld, b_fld, c_fld, d_fld\n    double precision         :: x, y\n    ! Just to show that different declarations work as expected\n    ! (a single precision value would not work, since the generic\n    ! interface does not provide a method for single precision).\n    real(kind=kind(1.0d0))   :: z\n    TYPE(grid_type), target  :: grid\n\n    call parallel_init()\n    grid = grid_type(GO_ARAKAWA_C,                                 &\n                     (/GO_BC_PERIODIC,GO_BC_PERIODIC,GO_BC_NONE/), &\n                     GO_OFFSET_SW)\n    call grid%decompose(3, 3, 1, 1, 1, halo_width=1)\n    ! Grid init adds a halo region of 2 automatically\n    call grid_init(grid, 1.0_8, 1.0_8)\n    a_fld = r2d_field(grid, GO_T_POINTS)\n    b_fld = r2d_field(grid, GO_T_POINTS)\n    c_fld = r2d_field(grid, GO_T_POINTS)\n    d_fld = r2d_field(grid, GO_T_POINTS)\n  \n    call invoke (init_field(a_fld, 1.0), &\n                 init_field(b_Fld, 2.0), &\n                 init_field(c_Fld, 3.0), &\n                 init_field(d_Fld, 4.0)    )\n\n    x = 0\n    z = 1\n    call invoke (update_field(a_fld, b_fld, c_fld, d_fld, x, y, z) )\n\n    print *,b_fld%data(1, 1)\nend program test",
			"file": "/home/joerg/work/psyclone/examples/gocean/eg7/test.x90",
			"file_size": 1425,
			"file_write_time": 132320919181042520,
			"settings":
			{
				"buffer_size": 1425,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -----------------------------------------------------------------------------\n# BSD 3-Clause License\n#\n# Copyright (c) 2020, Science and Technology Facilities Council.\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice, this\n#   list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the following disclaimer in the documentation\n#   and/or other materials provided with the distribution.\n#\n# * Neither the name of the copyright holder nor the names of its\n#   contributors may be used to endorse or promote products derived from\n#   this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n# -----------------------------------------------------------------------------\n# Author: J. Henrichs, Bureau of Meteorology\n\n'''Python script intended to be passed to PSyclone's generate()\nfunction via the -s option. It adds kernel read-only-verification to\nthe invokes.\n'''\n\nfrom __future__ import print_function\n\n\ndef trans(psy):\n    '''\n    Take the supplied psy object, and add kernel extraction code.\n\n    :param psy: the PSy layer to transform.\n    :type psy: :py:class:`psyclone.gocean1p0.GOPSy`\n\n    :returns: the transformed PSy object.\n    :rtype: :py:class:`psyclone.gocean1p0.GOPSy`\n\n    '''\n    from psyclone.psyir.transformations import ReadOnlyVerifyTrans\n    read_only_verify = ReadOnlyVerifyTrans()\n\n    invoke = psy.invokes.get(\"invoke_0\")\n    schedule = invoke.schedule\n    _, _ = read_only_verify.apply(schedule.children,\n                         {\"create_driver\": True,\n                          \"region_name\": (\"main\", \"init\")})\n\n    invoke = psy.invokes.get(\"invoke_1_update_field\")\n    schedule = invoke.schedule\n\n    # Enclose everything in a read_only_verify region\n    newschedule, _ = read_only_verify.apply(schedule.children,\n                                   {\"create_driver\": True,\n                                    \"region_name\": (\"main\", \"update\")})\n\n    invoke.schedule = newschedule\n    newschedule.view()\n    return psy\n",
			"file": "/home/joerg/work/psyclone/examples/gocean/eg7/read_only_transform.py",
			"file_size": 3038,
			"file_write_time": 132320878833466216,
			"settings":
			{
				"buffer_size": 3038,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/joerg/work/psyclone/src/psyclone/tests/psyir/transformations/read_only_verify_test.py",
			"settings":
			{
				"buffer_size": 3422,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 1959,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.f90",
			"settings":
			{
				"buffer_size": 2860,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "field_mod.F90",
			"settings":
			{
				"buffer_size": 33848,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "function_space_mod.F90",
			"settings":
			{
				"buffer_size": 46008,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "function_space_constructor_helper_functions_mod.F90",
			"settings":
			{
				"buffer_size": 82913,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mesh_mod.F90",
			"settings":
			{
				"buffer_size": 119220,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "global_mesh_mod.F90",
			"settings":
			{
				"buffer_size": 29027,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pavkage",
				"Package Control: Advanced Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 159.68862915,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/joerg/work/psyclone/lib/read_only/dl_esm_inf/Makefile",
		"/home/joerg/work/psyclone/lib/read_only/dl_esm_inf/read_only.f90",
		"/home/joerg/work/psyclone/src/psyclone/psyir/nodes/read_only_verify_node.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/transformations/read_only_verify_trans.py",
		"/home/joerg/work/psyclone/examples/gocean/eg7/Makefile",
		"/home/joerg/work/psyclone/examples/gocean/eg7/update_field_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/optimisation/generic-x86/global.py",
		"/home/joerg/work/psyclone/src/psyclone/tests/psyir/transformations/read_only_verify_test.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/transformations/__init__.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/tools/dependency_tools.py",
		"/home/joerg/work/psyclone/src/psyclone/core/access_info.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/nodes/__init__.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/__init__.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/nodes/node.py",
		"/home/joerg/work/psyclone/examples/gocean/eg7/read_only_transform.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/transformations/read_only_trans.py",
		"/home/joerg/work/psyclone/lib/read_only/lfric/read_only.f90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/field_parent_mod.f90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/count_mod.f90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/extrusion_mod.f90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/fs_continuity_mod.F90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/mpi_mod.f90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/partition_mod.F90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/field_mod.F90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/global_mesh_mod.F90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/domain_size_config_mod.f90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/coord_transform_mod.F90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/mesh_constructor_helper_functions_mod.F90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/mesh_mod.F90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/global_mesh_collection_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/example-small/faces2d",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/example-small/faces2d3",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/mesh/global_mesh_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/source/driver/gravity_wave_infrastructure_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/field/polynomial_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/function_space/function_space_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/field/pure_abstract_field_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/field/field_parent_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/field/field_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/source/initialisation/gravity_wave_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/mesh/mesh_collection_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/io/ugrid_2d_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/mesh/global_mesh_collection_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/source/driver/create_gravity_wave_prognostics_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/function_space/function_space_collection_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/driver/create_mesh_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/mesh/assign_coordinate_field_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/driver/create_fem_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/source/driver/gravity_wave_grid_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/source/driver/gravity_wave_driver_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/source/gravity_wave.f90",
		"/home/joerg/work/psyclone/examples/lfric/full_example/Makefile",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/example-small/yy",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/utilities/linked_list_mod.F90",
		"/home/joerg/work/psyclone/src/psyclone/tests/domain/gocean/transformations/gocean_extract_test.py",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/configuration_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/configuration/base_mesh_config_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/io/ncdf_quad_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/io/ugrid_file_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/configuration/finite_element_config_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/utilities/constants_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/algorithm/runtime_constants_mod_psy.mod",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/function_space/fs_continuity_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/source/driver/step_gravity_wave_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/field/field_collection_mod.f90",
		"/home/joerg/work/psyclone/examples/gocean/eg6/test.x90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/io/file_mod.F90",
		"/home/joerg/work/psyclone/feedback",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/utilities/log_mod.F90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/io/io_utility_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/driver/gravity_wave_grid_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/dependencies.mk",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/utilities/mpi_mod.f90",
		"/home/joerg/lfric/work/trunk/miniapps/gravity_wave/working/utilities/cli_mod.f90",
		"/home/joerg/work/psyclone/src/psyclone/parse/utils.py",
		"/home/joerg/work/fparser/src/fparser/statements.py",
		"/home/joerg/work/psyclone/src/psyclone/gocean1p0.py",
		"/home/joerg/work/psyclone/src/psyclone/tests/psyir/symbols/symboltable_test.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/symbols/symboltable.py",
		"/home/joerg/work/psyclone/src/psyclone/domain/gocean/transformations/gocean_extract_trans.py",
		"/home/joerg/work/lfric-changes",
		"/home/joerg/work/psyclone/doc/user_guide/profiling.rst",
		"/home/joerg/work/psyclone/doc/user_guide/psyke.rst",
		"/home/joerg/lfric/yaxt-0.8.1_build/src/Makefile",
		"/home/joerg/lfric/yaxt-0.8.1/src/Makefile.in",
		"/home/joerg/lfric/yaxt-0.8.1/src/Makefile.am",
		"/home/joerg/lfric/work/trunk/infrastructure/build/tools/configurator/namelistdescription.py",
		"/home/joerg/work/psyclone/doc/developer_guide/psy_data.rst",
		"/home/joerg/work/psyclone/doc/user_guide/psy_data.rst",
		"/home/joerg/work/psyclone/src/psyclone/psyir/nodes/psy_data_node.py",
		"/home/joerg/work/psyclone/examples/gocean/eg5/README.md",
		"/home/joerg/work/psyclone/doc/developer_guide/index.rst",
		"/home/joerg/work/psyclone/update_all",
		"/home/joerg/work/psyclone/examples/gocean/eg5/test.x90",
		"/home/joerg/lfric/yaxt-0.8.1_build/config.log",
		"/home/joerg/lfric/yaxt-0.8.1/configure",
		"/home/joerg/lfric/yaxt-0.8.1_build/conftest.c",
		"/home/joerg/work/psyclone/examples/gocean/eg5/Makefile",
		"/home/joerg/work/psyclone/src/psyclone/tests/psyir/transformations/psy_data_trans_test.py",
		"/home/joerg/work/psyclone/doc/developer_guide/profiling.rst",
		"/home/joerg/work/psyclone/lib/extract/dl_esm_inf/netcdf/kernel_data_netcdf.f90",
		"/home/joerg/work/psyclone/doc/developer_guide/psyir.rst",
		"/home/joerg/work/psyclone/lib/profiling/template/dummy_lib.f90",
		"/home/joerg/work/psyclone/lib/profiling/simple_timing/simple_timing.f90",
		"/home/joerg/work/psyclone/lib/profiling/nvidia/nvtx_prof.f90",
		"/home/joerg/work/psyclone/lib/profiling/dl_timer/dl_timer.f90",
		"/home/joerg/work/psyclone/lib/profiling/drhook/drhook_psy.f90",
		"/home/joerg/work/psyclone/lib/profiling/nvidia/README.md",
		"/home/joerg/work/psyclone/src/psyclone/psyir/transformations/region_trans.py",
		"/home/joerg/work/psyclone/src/psyclone/psyir/transformations/psy_data_trans.py",
		"/home/joerg/work/psyclone/src/psyclone/tests/config_test.py",
		"/home/joerg/work/psyclone/doc/user_guide/configuration.rst",
		"/home/joerg/work/psyclone/src/psyclone/psyir/transformations/extract_trans.py",
		"/home/joerg/work/psyclone/src/psyclone/configuration.py",
		"/home/joerg/work/psyclone/config/psyclone.cfg",
		"/home/joerg/work/psyclone/src/psyclone/psyGen.py",
		"/home/joerg/work/psyclone/src/psyclone/transformations.py",
		"/home/joerg/work/psyclone/doc/user_guide/api.rst",
		"/home/joerg/work/psyclone/doc/user_guide/conf.py",
		"/home/joerg/work/psyclone/examples/check_examples",
		"/home/joerg/work/psyclone/doc/developer_guide/src/psyclone/psyir/transformations/extract_trans.py",
		"/home/joerg/work/psyclone/src/psyclone/tests/psyir/transformations/region_trans_test.py",
		"/home/joerg/work/psyclone/src/psyclone/tests/psyir/nodes/psy_data_node_test.py",
		"/home/joerg/work/psyclone/doc/user_guide/index.rst",
		"/home/joerg/work/psyclone/examples/gocean/eg6/extract_transform.py",
		"/home/joerg/work/psyclone/lib/profiling/drhook/Makefile",
		"/home/joerg/work/psyclone/src/psyclone/domain/gocean/nodes/gocean_extract_node.py",
		"/home/joerg/work/psyclone/src/psyclone/tests/domain/lfric/transformations/lfric_extract_test.py"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 123.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_DIR",
			"field",
			"56",
			"omppara",
			"BuiltIn",
			"builtin",
			"37",
			"type",
			"of type",
			"etrans",
			"ExtractTrans",
			"cksum",
			"print",
			"write",
			"storing",
			"320",
			"retval",
			"z",
			"region_na",
			"class ",
			"class",
			"has b",
			"cksum",
			"readobl",
			"nodes",
			"extract",
			"EXTRACT_DIR",
			"257",
			"self",
			"114",
			"nc",
			"WriteFieldDouble",
			"WriteScalarDouble",
			"WriteScalarReal",
			"WriteScalarInt",
			"allocate",
			"wind",
			"get_proxy",
			"print",
			"vector_space_ptr",
			"initialiser",
			"initial",
			"constructo",
			"constructor",
			"get_mesh",
			"print",
			"print\n",
			"print",
			"xt_",
			"877",
			"claim_io",
			"claim_io_unit",
			"fortran_t",
			"halo_r",
			"get_halo_routing",
			"halo",
			"xt_redist",
			"wind",
			"element_order",
			"element_o",
			"k",
			"ndof_cell",
			"ndof_setup",
			"lfric_fs",
			"w0",
			"select_entity",
			"element_order",
			"mesh_coll",
			"mesh_collection",
			"construc",
			"print",
			"print\n",
			"print",
			"get_gid_from_lid(",
			"-1",
			"cell_on_vert",
			"0",
			"cell_on_vert",
			"cell_next_2d",
			"cell_on_vert_2d",
			"get_cell_on_v",
			"cell_on_vert_2d",
			"do whil",
			"-1",
			"cell_next(",
			"cell_next_2d",
			"get_next_cell",
			"rectangular_pa",
			"num_gh",
			"rectangular_panels",
			"num_ghost",
			"local_rank",
			"construct",
			"global_cell_id",
			"self%num_ed",
			"unit",
			"edge_on_cell_2d",
			"construc",
			"0",
			"get_gid_from_lid",
			"edge_on_cell_2d",
			"get_edge_on_cell",
			"edges",
			"get_edge_cell_ow",
			"get_edge_cel",
			"print",
			"XX",
			"print",
			"extrusion_constr",
			"extrusion_constructor",
			"uniform_extr",
			"extrusion_type",
			"\"H1",
			"uniform_extrusion_t",
			"uniform_extrusion_con",
			"extrusion_type",
			"construc",
			"cell_next_2d",
			"get_cell_next",
			"cell_next_2d",
			"cell_next",
			"cell_next(",
			"rectangular_p",
			"planar",
			"domain_s",
			"construc",
			"local_rank",
			"constr"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"read_only",
			"ReadOnlyVerifyTrans",
			"chksum",
			"read_only_verify",
			"READ_ONLY_DIR",
			"this",
			"ChecksumFieldDouble",
			"ChecksumScalarDouble",
			"ChecksumScalarReal",
			"ChecksumScalarInt",
			"0",
			"-1",
			"0",
			"-1",
			"\\n",
			"initialise_grid"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/joerg/lfric/work/trunk/miniapps/gravity_wave/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9947,
						"regions":
						{
						},
						"selection":
						[
							[
								982,
								982
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 94.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/joerg/lfric/work/trunk/infrastructure/build/psyclone.mk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3203,
						"regions":
						{
						},
						"selection":
						[
							[
								2174,
								2174
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1479.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/joerg/lfric/work/trunk/miniapps/gravity_wave/optimisation/generic-x86/algorithm/gw_init_fields_alg_mod.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2745,
						"regions":
						{
						},
						"selection":
						[
							[
								2391,
								2391
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1014.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/joerg/work/psyclone/examples/gocean/eg7/test.x90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1425,
						"regions":
						{
						},
						"selection":
						[
							[
								1029,
								1029
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 397.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/joerg/work/psyclone/examples/gocean/eg7/read_only_transform.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3038,
						"regions":
						{
						},
						"selection":
						[
							[
								2287,
								2287
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 865.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/joerg/work/psyclone/src/psyclone/tests/psyir/transformations/read_only_verify_test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3422,
						"regions":
						{
						},
						"selection":
						[
							[
								2605,
								2605
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1063.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1959,
						"regions":
						{
						},
						"selection":
						[
							[
								1784,
								1784
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 13.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "main.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2860,
						"regions":
						{
						},
						"selection":
						[
							[
								2682,
								2682
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 891.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "field_mod.F90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33848,
						"regions":
						{
						},
						"selection":
						[
							[
								10952,
								10952
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7319.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "function_space_mod.F90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46008,
						"regions":
						{
						},
						"selection":
						[
							[
								36174,
								36174
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 25623.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "function_space_constructor_helper_functions_mod.F90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 82913,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "mesh_mod.F90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 119220,
						"regions":
						{
						},
						"selection":
						[
							[
								541,
								541
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "global_mesh_mod.F90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29027,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 45.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "full_example.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"global_Me",
				"working/mesh/global_mesh_mod.F90"
			],
			[
				"create_mes",
				"working/driver/create_mesh_mod.F90"
			],
			[
				"constants",
				"working/utilities/constants_mod.F90"
			],
			[
				"constants_mpd",
				"working/algorithm/runtime_constants_mod_psy.mod"
			],
			[
				"field_mod",
				"working/field/field_mod.F90"
			],
			[
				"ncdf",
				"working/io/ncdf_quad_mod.F90"
			],
			[
				"ugrid",
				"working/io/ugrid_2d_mod.F90"
			],
			[
				"gravity_wave_grid",
				"source/driver/gravity_wave_grid_mod.f90"
			],
			[
				"create_mesh",
				"working/driver/create_mesh_mod.F90"
			],
			[
				"io_util",
				"working/io/io_utility_mod.f90"
			],
			[
				"base_me",
				"working/configuration/base_mesh_config_mod.f90"
			],
			[
				"cli",
				"working/utilities/cli_mod.f90"
			],
			[
				"utils",
				"psyclone/parse/utils.py"
			],
			[
				"gocean_ex",
				"psyclone/tests/domain/gocean/transformations/gocean_extract_test.py"
			],
			[
				"gocean1",
				"psyclone/gocean1p0.py"
			],
			[
				"f2p",
				"psyclone/f2pygen.py"
			],
			[
				"symboltable_te",
				"psyclone/tests/psyir/symbols/symboltable_test.py"
			],
			[
				"symbolta",
				"psyclone/psyir/symbols/symboltable.py"
			],
			[
				"gocean1p0_config",
				"psyclone/tests/gocean1p0_config_test.py"
			],
			[
				"gocean_extract_no",
				"psyclone/domain/gocean/nodes/gocean_extract_node.py"
			],
			[
				"gocean_extr",
				"psyclone/domain/gocean/transformations/gocean_extract_trans.py"
			],
			[
				"configuratoin",
				"psyclone/configuration.py"
			],
			[
				"psy_data_node",
				"psyclone/psyir/nodes/psy_data_node.py"
			],
			[
				"psy_data_no",
				"psyclone/psyir/nodes/psy_data_node.py"
			],
			[
				"psy_data",
				"doc/developer_guide/psy_data.rst"
			],
			[
				"node.",
				"psyclone/psyir/nodes/node.py"
			],
			[
				"psyir",
				"doc/developer_guide/psyir.rst"
			],
			[
				"config_test.",
				"psyclone/tests/config_test.py"
			],
			[
				"psy_data_tr",
				"psyclone/psyir/transformations/psy_data_trans.py"
			],
			[
				"config_te",
				"psyclone/tests/config_test.py"
			],
			[
				"configu",
				"psyclone/configuration.py"
			],
			[
				"api.r",
				"doc/user_guide/api.rst"
			],
			[
				"region_t",
				"psyclone/psyir/transformations/region_trans.py"
			],
			[
				"psyGe",
				"psyclone/psyGen.py"
			],
			[
				"psyGen",
				"psyclone/psyGen.py"
			],
			[
				"region_trans.py",
				"psyclone/psyir/transformations/region_trans.py"
			],
			[
				"trans",
				"psyclone/transformations.py"
			],
			[
				"region_trans_te",
				"psyclone/tests/psyir/transformations/region_trans_test.py"
			],
			[
				"psy_Data_tra",
				"psyclone/tests/psyir/transformations/psy_data_trans_test.py"
			],
			[
				"extract_tr",
				"psyclone/psyir/transformations/extract_trans.py"
			],
			[
				"lfric_ex",
				"psyclone/tests/domain/lfric/transformations/lfric_extract_test.py"
			],
			[
				"gocean_extract_te",
				"psyclone/tests/domain/gocean/transformations/gocean_extract_test.py"
			],
			[
				"extr",
				"psyclone/psyir/nodes/extract_node.py"
			],
			[
				"lfric_extract_tr",
				"psyclone/domain/lfric/transformations/lfric_extract_trans.py"
			],
			[
				"profile_n",
				"psyclone/psyir/nodes/profile_node.py"
			],
			[
				"extract",
				"psyclone/psyir/nodes/extract_node.py"
			],
			[
				"extract_no",
				"psyclone/domain/gocean/nodes/gocean_extract_node.py"
			],
			[
				"psy_data.",
				"doc/user_guide/psy_data.rst"
			],
			[
				"profile_test",
				"psyclone/tests/psyir/transformations/profile_test.py"
			],
			[
				"nemo_profile_te",
				"psyclone/tests/nemo/transformations/profiling/nemo_profile_test.py"
			],
			[
				"psy_data_test",
				"psyclone/tests/psyir/transformations/psy_data_test.py"
			],
			[
				"lfric_extract_te",
				"psyclone/tests/domain/lfric/transformations/lfric_extract_test.py"
			],
			[
				"transformations_te",
				"psyclone/tests/psyir/transformations/transformations_test.py"
			],
			[
				"transf",
				"psyclone/transformations.py"
			],
			[
				"Tranformation",
				"psyclone/transformations.py"
			],
			[
				"profile_t",
				"psyclone/psyir/transformations/profile_trans.py"
			],
			[
				"profile_Te",
				"psyclone/tests/psyir/transformations/profile_test.py"
			],
			[
				"regoin_tr",
				"psyclone/psyir/transformations/region_trans.py"
			],
			[
				"extract_trans",
				"psyclone/psyir/transformations/extract_trans.py"
			],
			[
				"extract_node",
				"psyclone/psyir/nodes/extract_node.py"
			],
			[
				"lfric_extr",
				"psyclone/domain/lfric/transformations/lfric_extract_trans.py"
			],
			[
				"psy_data.r",
				"doc/user_guide/psy_data.rst"
			],
			[
				"profiling.rst",
				"doc/user_guide/profiling.rst"
			],
			[
				"nemo_pro",
				"psyclone/tests/nemo/transformations/profiling/nemo_profile_test.py"
			],
			[
				"porofile_n",
				"psyclone/psyir/nodes/profile_node.py"
			],
			[
				"profile_te",
				"psyclone/tests/psyir/transformations/profile_test.py"
			],
			[
				"psy_da",
				"psyclone/psyir/nodes/psy_data_node.py"
			],
			[
				"orofile_tra",
				"psyclone/psyir/transformations/profile_trans.py"
			],
			[
				"profile_no",
				"psyclone/psyir/nodes/profile_node.py"
			],
			[
				"configurat",
				"psyclone/configuration.py"
			],
			[
				"f2py",
				"psyclone/f2pygen.py"
			],
			[
				"psy_data_t",
				"psyclone/tests/psyir/transformations/psy_data_test.py"
			],
			[
				"config",
				"psyclone/configuration.py"
			],
			[
				"driver",
				"psyclone/tests/test_files/gocean1p0/driver_test.f90"
			],
			[
				"symbol_te",
				"psyclone/tests/psyir/symbols/datasymbol_test.py"
			],
			[
				"Symbol",
				"psyclone/psyir/symbols/symbol.py"
			],
			[
				"symbolt",
				"psyclone/psyir/symbols/symboltable.py"
			],
			[
				"gocean1p",
				"psyclone/gocean1p0.py"
			],
			[
				"gocean_Extr",
				"psyclone/tests/domain/gocean/transformations/gocean_extract_test.py"
			],
			[
				"driver_test.f90",
				"psyclone/tests/test_files/gocean1p0/driver_test.f90"
			],
			[
				"profile_tr",
				"psyclone/psyir/transformations/profile_trans.py"
			],
			[
				"node.py",
				"psyclone/psyir/nodes/node.py"
			],
			[
				"node.p",
				"psyclone/psyir/nodes/node.py"
			],
			[
				"driver_test.f",
				"psyclone/tests/test_files/gocean1p0/driver_test.f90"
			],
			[
				"extract_test",
				"psyclone/tests/psyir/transformations/extract_test.py"
			],
			[
				"kernel_driver",
				"psyclone/tests/test_files/gocean1p0/kernel_driver_test.f90"
			],
			[
				"driver_te",
				"psyclone/tests/test_files/gocean1p0/driver_test.f90"
			],
			[
				"gocean1p0_trans",
				"psyclone/tests/domain/gocean/transformations/gocean1p0_transformations_test.py"
			],
			[
				"psy_data_n",
				"psyclone/psyir/nodes/psy_data_node.py"
			],
			[
				"gocean_extract_test",
				"psyclone/tests/domain/gocean/transformations/gocean_extract_test.py"
			],
			[
				"gocean_tr",
				"psyclone/domain/gocean/transformations/gocean_extract_trans.py"
			],
			[
				"psyke",
				"doc/user_guide/psyke.rst"
			],
			[
				"region_",
				"psyclone/psyir/transformations/region_trans.py"
			],
			[
				"psy_data_te",
				"psyclone/tests/psyir/transformations/psy_data_test.py"
			],
			[
				"coding",
				"doc/developer_guide/coding-style.rst"
			],
			[
				"extract_p",
				"psyclone/psyir/nodes/extract_node.py"
			],
			[
				"gocean_e",
				"psyclone/domain/gocean/nodes/gocean_extract_node.py"
			],
			[
				"gocean1p0_tr",
				"psyclone/tests/domain/gocean/transformations/gocean1p0_transformations_test.py"
			],
			[
				"nemo_profi",
				"psyclone/tests/nemo/transformations/profiling/nemo_profile_test.py"
			],
			[
				"porofile_tr",
				"psyclone/psyir/transformations/profile_trans.py"
			],
			[
				"depe",
				"psyclone/psyir/tools/dependency_tools.py"
			],
			[
				"psy_data_trans",
				"psyclone/psyir/transformations/psy_data_trans.py"
			],
			[
				"dependency_to",
				"psyclone/psyir/tools/dependency_tools.py"
			],
			[
				"pbs",
				"psyclone/psyir/backend/sir.py"
			],
			[
				"kernel",
				"psyclone/parse/kernel.py"
			],
			[
				"depen",
				"psyclone/tests/dependency_test.py"
			],
			[
				"access_info_t",
				"psyclone/tests/core/access_info_test.py"
			],
			[
				"access_",
				"psyclone/core/access_info.py"
			],
			[
				"extrac",
				"psyclone/psyir/nodes/extract_node.py"
			],
			[
				"gocan_extr",
				"psyclone/domain/gocean/transformations/gocean_extract_trans.py"
			],
			[
				"pro",
				"psyclone/profiler.py"
			],
			[
				"profiler",
				"psyclone/profiler.py"
			],
			[
				"profil",
				"psyclone/psyir/nodes/profile_node.py"
			],
			[
				"access_i",
				"psyclone/core/access_info.py"
			],
			[
				"examples.r",
				"doc/user_guide/examples.rst"
			],
			[
				"init_fiel",
				"~/work/psyclone/examples/gocean/eg6/init_field_mod.f90"
			],
			[
				"profiling.r",
				"doc/user_guide/profiling.rst"
			],
			[
				"kernel_netcd",
				"~/work/psyclone/lib/extract/netcdf/kernel_data_netcdf.f90"
			],
			[
				"psyk",
				"doc/user_guide/psyke.rst"
			],
			[
				"codin",
				"doc/developer_guide/coding-style.rst"
			],
			[
				"region_tr",
				"psyclone/psyir/transformations/region_trans.py"
			],
			[
				"access_info",
				"psyclone/core/access_info.py"
			],
			[
				"region",
				"psyclone/psyir/transformations/region_trans.py"
			],
			[
				"tran",
				"psyclone/transformations.py"
			],
			[
				"profi",
				"doc/user_guide/profiling.rst"
			],
			[
				"transfo",
				"psyclone/transformations.py"
			],
			[
				"dependency_te",
				"psyclone/tests/dependency_test.py"
			],
			[
				"dynamo0p3_bas",
				"psyclone/tests/dynamo0p3_basis_test.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 96.0,
		"last_filter": "get_node_coords",
		"selected_items":
		[
			[
				"get_node_coords",
				"get_node_coords_transpose"
			],
			[
				"global_mesh_type",
				"global_mesh_type"
			],
			[
				"add_new_global_mesh",
				"add_new_global_mesh"
			],
			[
				"poly",
				"poly1d"
			],
			[
				"linked_list",
				"linked_list_mod"
			],
			[
				"assign_coordinate_field",
				"assign_coordinate_field"
			],
			[
				"finite_element_cn",
				"finite_element_config_mod"
			],
			[
				"fs_continu",
				"fs_continuity_mod"
			],
			[
				"gravity_wave_pro",
				"create_gravity_wave_prognostics_mod"
			],
			[
				"create_gravity_wave_prognostics",
				"create_gravity_wave_prognostics_mod"
			],
			[
				"field_collection_type",
				"field_collection_type"
			],
			[
				"init_fem",
				"init_fem"
			],
			[
				"global_mesh_ty",
				"global_mesh_type"
			],
			[
				"get_global_mesh",
				"get_global_mesh"
			],
			[
				"ugrid_file_mod",
				"ugrid_file_mod"
			],
			[
				"log_event",
				"log_event"
			],
			[
				"mesh_collection_type",
				"mesh_collection_type"
			],
			[
				"init_mesh",
				"init_mesh"
			],
			[
				"initialise_grid",
				"initialise_grid"
			],
			[
				"geometry_from_key",
				"geometry_from_key"
			],
			[
				"read_base_mesh_namelist",
				"read_base_mesh_namelist"
			],
			[
				"read_configuration_namelists",
				"read_configuration_namelists"
			],
			[
				"read_configuration",
				"read_configuration"
			],
			[
				"load_configuration",
				"load_configuration"
			],
			[
				"initialise_infrastructure",
				"initialise_infrastructure"
			],
			[
				"function_space_type",
				"function_space_type"
			],
			[
				"field_parent_proxy_initialiser",
				"field_parent_proxy_initialiser"
			],
			[
				"function_space_collection",
				"function_space_collection_constructor"
			],
			[
				"",
				"./PSYKE/dino_mod.o ./PSYKE/dino_mod.mod"
			],
			[
				"step",
				"step_gravity_wave"
			],
			[
				"run",
				"run"
			],
			[
				"initialise",
				"initialise"
			],
			[
				"initialise_com",
				"initialise_comm"
			]
		],
		"width": 1164.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 218.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
