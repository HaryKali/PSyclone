! -----------------------------------------------------------------------------
! BSD 3-Clause License
!
! Copyright (c) 2020, Science and Technology Facilities Council.
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! * Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.
!
! * Redistributions in binary form must reproduce the above copyright notice,
!   this list of conditions and the following disclaimer in the documentation
!   and/or other materials provided with the distribution.
!
! * Neither the name of the copyright holder nor the names of its
!   contributors may be used to endorse or promote products derived from
!   this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
! FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
! COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
! BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGE.
! -----------------------------------------------------------------------------
! Author: I. Kavcic, Met Office
!
! -----------------------------------------------------------------------------
! A module that creates fields on any function space, initialises and adds
! them (here continuous "velocity space" W2 and discontinuous "potential
! temperature space" Wtheta)
! -----------------------------------------------------------------------------
module example1_alg_mod

  use constants_mod,               only : i_def, r_def
  use log_mod,                     only : log_event, &
                                          LOG_LEVEL_INFO
  use mesh_mod,                    only : mesh_type
  use function_space_mod,          only : function_space_type
  use field_mod,                   only : field_type
  use fs_continuity_mod,           only : W2, Wtheta
  use setval_field_any_kernel_mod, only : setval_field_any_kernel_type
  use add_fields_any_kernel_mod,   only : add_fields_any_kernel_type

  implicit none

  private

  public :: example1_alg

contains

  subroutine example1_alg(mesh, element_order)

    implicit none

    ! Input arguments from the driver: Mesh and FEM order
    type(mesh_type), intent(in)        :: mesh
    integer(i_def),  intent(in)        :: element_order
    ! Function spaces W2 and Wtheta and fields on them
    type(function_space_type), target  :: fs_w2
    type(function_space_type), target  :: fs_wtheta
    type(function_space_type), pointer :: fs_w2_ptr => null(), &
                                          fs_wtheta_ptr => null()
    type(field_type)                   :: u_out, u1_in, u2_in
    type(field_type)                   :: theta_out, theta1_in, &
                                          theta2_in
    ! Number of values per degree of freedom for function spaces
    integer(i_def)                     :: ndata_sz

    call log_event( "example1_alg: Running algorithm", LOG_LEVEL_INFO )

    ! Create W2 and Wtheta function spaces with single-valued data points
    ndata_sz = 1
    fs_w2 = function_space_type( mesh, element_order, W2, ndata_sz)
    fs_w2_ptr => fs_w2
    fs_wtheta = function_space_type( mesh, element_order, Wtheta, ndata_sz)
    fs_wtheta_ptr => fs_wtheta

    ! Create velocity fields on W2 function space
    call u_out%initialise( vector_space = fs_w2_ptr, name="u_out" )
    call u1_in%initialise( vector_space = fs_w2_ptr, name="u1_in" )
    call u2_in%initialise( vector_space = fs_w2_ptr, name="u2_in" )

    ! Create temperature fields on Wtheta function space
    call theta_out%initialise( vector_space = fs_wtheta_ptr, name="theta_out" )
    call theta1_in%initialise( vector_space = fs_wtheta_ptr, name="theta1_in" )
    call theta2_in%initialise( vector_space = fs_wtheta_ptr, name="theta2_in" )

    ! Set each velocity field to a constant value and add them in the same invoke
    call invoke( name = "Add fields on W2 space",                 &
                 setval_field_any_kernel_type(u_out,  0.0_r_def), &
                 setval_field_any_kernel_type(u1_in, -2.0_r_def), &
                 setval_field_any_kernel_type(u2_in,  6.0_r_def), &
                 add_fields_any_kernel_type(u_out, u1_in, u2_in) )

    ! Set each temperature field to a constant value and add them in the same invoke
    call invoke( name = "Add fields on Wtheta space",                    &
                 setval_field_any_kernel_type(theta_out,    0.0_r_def),  &
                 setval_field_any_kernel_type(theta1_in,  373.15_r_def), &
                 setval_field_any_kernel_type(theta2_in, -273.15_r_def), &
                 add_fields_any_kernel_type(theta_out, theta1_in, theta2_in) )

    ! Check the values of constant velocity fields by printing the min/max values
    call u_out%log_minmax(LOG_LEVEL_INFO, 'u_out')
    call u1_in%log_minmax(LOG_LEVEL_INFO, 'u1_in')
    call u2_in%log_minmax(LOG_LEVEL_INFO, 'u2_in')

    ! Check the values of constant temperature fields by printing the min/max values
    call theta_out%log_minmax(LOG_LEVEL_INFO, 'theta_out')
    call theta1_in%log_minmax(LOG_LEVEL_INFO, 'theta1_in')
    call theta2_in%log_minmax(LOG_LEVEL_INFO, 'theta2_in')

    call log_event( "example1_alg: Finalising algorithm", LOG_LEVEL_INFO )
    nullify( fs_w2_ptr, fs_wtheta_ptr )

  end subroutine example1_alg

end module example1_alg_mod
