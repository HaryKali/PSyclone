! -----------------------------------------------------------------------------
! BSD 3-Clause License
!
! Copyright (c) 2020, Science and Technology Facilities Council.
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! * Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.
!
! * Redistributions in binary form must reproduce the above copyright notice,
!   this list of conditions and the following disclaimer in the documentation
!   and/or other materials provided with the distribution.
!
! * Neither the name of the copyright holder nor the names of its
!   contributors may be used to endorse or promote products derived from
!   this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
! FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
! COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
! BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGE.
! -----------------------------------------------------------------------------
! Author: I. Kavcic, Met Office
!
! -----------------------------------------------------------------------------
! Calls a kernel to map the coordinate fields from its space (W0 or Wchi) to
! the space of a diagnostic field (W3) and calls IO routine to output the
! coordinate and diagnostic field data for plotting.
! -----------------------------------------------------------------------------
module diagnostic_alg_mod

  ! Infrastructure
  use constants_mod,                only : i_def, r_def, str_short, &
                                           str_max_filename
  use log_mod,                      only : log_event, &
                                           LOG_LEVEL_INFO
  use field_mod,                    only : field_type
  ! I/O and field mapping
  use write_methods_mod,            only : nodal_write_field
  use nodal_coordinates_kernel_mod, only : nodal_coordinates_kernel_type

  implicit none

  private

  public :: diagnostic_coordinates_alg
  public :: write_diagnostic_alg

contains

  !> @brief Map coordinate fields to the function space of the
  !!        diagnostic field
  !> @param[in] chi Coordinate fields on Wchi space
  !> @param[in,out] diag_field Diagnostic field
  !> @param[out] chi_map Coordinate fields mapped to diagnostic field space
  subroutine diagnostic_coordinates_alg(chi, diag_field, chi_map)

    implicit none

    type(field_type), intent(in)    :: chi(3)
    type(field_type), intent(inout) :: diag_field
    type(field_type), intent(out)   :: chi_map(3)

    character(len=str_short) :: cind
    integer(kind=i_def)      :: i

    ! Create mapped coordinate fields by copying diagnostic field
    ! properties and initialise them to 0 by using built-ins
    call log_event( "diagnostic_coordinates_alg: Creating mapped "// &
                    "coordinate fields", LOG_LEVEL_INFO )
    do i = 1, size(chi_map)
      write(cind, '(I5)') i  ! Convert integer index to string
      call diag_field%copy_field_properties( &
                        chi_map(i), name="chi_map_"//trim(adjustl(cind)))
      call invoke( setval_c(chi_map(i), 0.0_r_def) )
    end do

    ! Map coordinates from chi function space to chi_map function space
    call log_event( "diagnostic_coordinates_alg: Mapping coordinate fields "// &
                    "to diagnostic field function space ", LOG_LEVEL_INFO )
    call invoke( nodal_coordinates_kernel_type(chi_map, chi) )

  end subroutine diagnostic_coordinates_alg

  !> @brief Output coordinate and diagnostic fields to a text file
  !> @param[in] chi_map Coordinate fields mapped to diagnostic field space
  !> @param[in] diag_field Diagnostic field to output
  !> @param[in] tstep Timestep value to create the output file name from
  subroutine write_diagnostic_alg(chi_map, diag_field, tstep)

    implicit none

    type(field_type),    intent(in) :: chi_map(3)
    type(field_type),    intent(in) :: diag_field
    integer(kind=i_def), intent(in) :: tstep

    type(field_type)            :: diag_write_field(3)
    character(len=str_short)    :: cind
    character(str_max_filename) :: filename
    integer(kind=i_def)         :: dim_fs, i, output_unit

    ! Convert timestep value to string and create output filename
    write(cind, '(I5)') tstep  ! Convert integer index to string
    filename = "model_state_tstep_"//trim(adjustl(cind))//".txt"
    ! Set output unit number
    output_unit = 10 + tstep

    ! Get vector dimension of the diagnostic field (1 for scalar-valued
    ! field and 3 for vector-valued field)
    dim_fs  = diag_field%vspace%get_dim_space()
    ! Populate components of the temporary output diagnostic field (all
    ! same here)
    do i = 1, dim_fs
       call diag_field%copy_field(diag_write_field(i))
    end do

    ! Output data
    call log_event( "write_diagnostic_alg: Outputting coordinate and "// &
                    "diagnostic field data to file '"//trim(filename)//"'", &
                    LOG_LEVEL_INFO )
    call nodal_write_field(chi_map, diag_write_field, dim_fs, &
                           output_unit, filename)

  end subroutine write_diagnostic_alg

end module diagnostic_alg_mod
