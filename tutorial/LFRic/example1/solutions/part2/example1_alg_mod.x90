! -----------------------------------------------------------------------------
! BSD 3-Clause License
!
! Copyright (c) 2020, Science and Technology Facilities Council.
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! * Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.
!
! * Redistributions in binary form must reproduce the above copyright notice,
!   this list of conditions and the following disclaimer in the documentation
!   and/or other materials provided with the distribution.
!
! * Neither the name of the copyright holder nor the names of its
!   contributors may be used to endorse or promote products derived from
!   this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
! FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
! COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
! BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGE.
! -----------------------------------------------------------------------------
! Author: I. Kavcic, Met Office
!
! -----------------------------------------------------------------------------
! A module that creates fields on W0 function space, initialises and adds them
! -----------------------------------------------------------------------------
module example1_alg_mod

  use constants_mod,              only : i_def, r_def
  use log_mod,                    only : log_event, &
                                         LOG_LEVEL_INFO
  use mesh_mod,                   only : mesh_type
  use function_space_mod,         only : function_space_type
  use field_mod,                  only : field_type
  use fs_continuity_mod,          only : W0
  use setval_field_w0_kernel_mod, only : setval_field_w0_kernel_type
  use add_fields_w0_kernel_mod,   only : add_fields_w0_kernel_type

  implicit none

  private

  public :: example1_alg

contains

  subroutine example1_alg(mesh, element_order)

    implicit none

    ! Input arguments from the driver: Mesh and FEM order
    type(mesh_type), intent(in)        :: mesh
    integer(i_def),  intent(in)        :: element_order
    ! Function space W0 and fields on it
    type(function_space_type), target  :: fs_w0
    type(function_space_type), pointer :: fs_w0_ptr => null()
    type(field_type)                   :: field_out_w0, &
                                          field1_in_w0, &
                                          field2_in_w0
    ! Number of values per degree of freedom for function spaces
    integer(i_def), parameter          :: ndata_sz = 1

    call log_event( "example1_alg: Running algorithm", LOG_LEVEL_INFO )

    ! Create W0 function space with single-valued data points
    fs_w0 = function_space_type( mesh, element_order, W0, ndata_sz )
    fs_w0_ptr => fs_w0

    ! Create fields on W0 function space
    call field_out_w0%initialise( vector_space = fs_w0_ptr, &
                                  name="field_out_w0" )
    call field1_in_w0%initialise( vector_space = fs_w0_ptr, &
                                  name="field1_in_w0" )
    call field2_in_w0%initialise( vector_space = fs_w0_ptr, &
                                  name="field2_in_w0" )

    !---------------------------------------------------------------------------
    ! TO COMPLETE: Set each field to a constant value and add them in the
    ! same invoke
    call invoke( name = "Add fields on W0 space",                       &
                 setval_field_w0_kernel_type(field_out_w0,  0.0_r_def), &
                 setval_field_w0_kernel_type(field1_in_w0, -2.0_r_def), &
                 setval_field_w0_kernel_type(field2_in_w0,  6.0_r_def), &
                 add_fields_w0_kernel_type(field_out_w0, field1_in_w0,  &
                                           field2_in_w0) )
    !---------------------------------------------------------------------------

    ! Check the values of constant fields by printing the min/max values
    call field_out_w0%log_minmax(LOG_LEVEL_INFO, field_out_w0%name)
    call field1_in_w0%log_minmax(LOG_LEVEL_INFO, field1_in_w0%name)
    call field2_in_w0%log_minmax(LOG_LEVEL_INFO, field2_in_w0%name)

    call log_event( "example1_alg: Finalising algorithm", LOG_LEVEL_INFO )
    nullify( fs_w0_ptr )

  end subroutine example1_alg

end module example1_alg_mod
